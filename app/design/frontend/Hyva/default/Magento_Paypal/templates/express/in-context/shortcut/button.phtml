<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Paypal\Block\Express\InContext\Minicart\SmartButton;

/** @var SmartButton $block */
/** @var Escaper $escaper */

$widgetData = json_decode($block->getJsInitParams(), true);
$widgetJson = json_encode($widgetData['Magento_Paypal/js/in-context/button']);
$uniqueId   = '_' . uniqid();
?>
<div x-data="initPayPalInContextButton<?= $escaper->escapeHtmlAttr($uniqueId) ?>()"
     x-init="refs = $refs"
     x-ref="buttonContainer-<?= $escaper->escapeHtmlAttr($uniqueId) ?>"
     @private-content-loaded.window="getSectionData($event.detail.data);"
     class="paypal checkout paypal-logo <?= $escaper->escapeHtmlAttr($block->getContainerId()) ?>-container">
</div>

<script>
    function initPayPalInContextButton<?= $escaper->escapeHtmlAttr($uniqueId) ?>() {
        return {
            refs: false,
            clientConfig: <?= /** @noEscape */ $widgetJson ?>.clientConfig || {},
            customerSection: {},
            cartSection: false,
            actions: {},
            getSectionData(sectionData) {
                if (sectionData.customer) {
                    this.customerSection = sectionData.customer;
                }
                if (sectionData.cart) {
                    this.cartSection = sectionData.cart;
                }
                if (this.cartSection.items && this.cartSection.items.length) {
                    // todo: check if allowed by verifying logged in and isGuestCheckoutAllowed = true
                    this.initializeButtons();
                }
            },
            initializeButtons() {
                const element = this.refs['buttonContainer-<?= $escaper->escapeJs($uniqueId) ?>'];
                const clientConfig = this.clientConfig;

                const loadPayPalScriptPromise = this.createScriptLoadPromise(clientConfig.sdkUrl);

                Promise.all(loadPayPalScriptPromise).then(() => {
                    const paypal = window.paypal;
                    const getCookie = this.getCookie;

                    paypal && paypal.Buttons({
                        style: clientConfig.styles,

                        /**
                         * onInit is called when the button first renders
                         * @param {Object} data
                         * @param {Object} actions
                         */
                        onInit(data, actions) {
                            this.actions = actions || this.actions;
                        },

                        /**
                         * Triggers beforePayment action on PayPal buttons
                         * @returns {Object} jQuery promise
                         */
                        createOrder() {
                            const params = "quote_id="+clientConfig.quoteId +
                                "&customer_id=" + ( clientConfig.customerId ?
                                    clientConfig.customerId :
                                    ''
                                ) +
                                "&form_key=" + (getCookie('form_key') || '') +
                                "&button=" + clientConfig.button;

                            return window.fetch(clientConfig.getTokenUrl, {
                                "headers": {
                                    "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                },
                                "body": params,
                                "method": "POST",
                                "mode": "cors",
                                "credentials": "include"
                            })
                                .then(result => result.json())
                                .then(data => data.token)
                                .catch((error)=>console.log(error));

                        },

                        /**
                         * Triggers beforeOnAuthorize action on PayPal buttons
                         * @param {Object} data
                         * @param {Object} actions
                         */
                        onApprove(data, actions) {
                            const params = "paymentToken=" + (data.orderID || '') +
                                "&payerId=" + (data.payerID || '') +
                                "&quoteId=" + (clientConfig.quoteId || '') +
                                "&customerId=" + (clientConfig.customerId || '') +
                                "&form_key=" + (getCookie('form_key') || '');

                            return window.fetch(clientConfig.onAuthorizeUrl, {
                                "headers": {
                                    "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                },
                                "body": params,
                                "method": "POST",
                                "mode": "cors",
                                "credentials": "include"
                            })
                                .then(data => {
                                    return data.json()
                                }).then(response => {
                                    if (response.success) {
                                        return actions.redirect(response.redirectUrl);
                                    }

                                    throw new Error(response['error_message']);
                                })
                                .catch((error)=>console.log(error)).finally(()=>{
                                    const reloadCustomerDataEvent = new CustomEvent("reload-customer-section-data");
                                    window.dispatchEvent(reloadCustomerDataEvent);
                                });
                        },

                        /**
                         * Execute logic on Paypal button click
                         */
                        onClick() {

                            paypal.actions = this.actions;
                            //clientConfig.rendererComponent.validate();
                            //clientConfig.rendererComponent.onClick();
                        },

                        /**
                         * Process cancel action
                         * @param {Object} data
                         * @param {Object} actions
                         */
                        onCancel(data, actions) {
                            //clientConfig.rendererComponent.onCancel(data, actions);

                        },

                        /**
                         * Process errors
                         *
                         * @param {Error} err
                         */
                        onError(err) {
                            //clientConfig.rendererComponent.onError(err);

                        }
                    }).render(element);
                });
            },
            createScriptLoadPromise(url) {
                const promises = [];

                promises.push(new Promise(function(resolve, reject) {
                    const script = document.createElement('script');
                    script.src = url;

                    script.addEventListener('load', function() {
                        resolve(script);
                    }, false);

                    script.addEventListener('error', function(event) {
                        reject(script);
                        console.log('The PayPal script could not be loaded', event);
                    }, false);

                    document.body.appendChild(script);
                }));

                return promises;
            },
            getCookie(name) {
                const v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
                return v ? v[2] : null;
            }
        }
    }
</script>
