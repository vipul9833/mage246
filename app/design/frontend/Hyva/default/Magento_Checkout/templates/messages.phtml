<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Magento\Checkout\Block\Cart\ValidationMessages;
use Magento\Framework\Escaper;

/** @var ValidationMessages $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */

if (! $block->getMessageCollection()->getCount()) {
    return;
}

$messages = [];
foreach ($block->getMessageTypes() as $type) {
    foreach ($block->getMessagesByType($type) as $message) {
        $messages[] = ['type' => $type, 'text' => $message->getText()];
    }
}
?>
<script>
    <?php
    /**
     * The `hyva` JS namespace is being set by Hyva_Theme/src/view/frontend/templates/page/js/hyva.phtml
     * and should be included through Hyva_Theme/src/view/frontend/layout/default_hyva.xml
     */
    ?>
    if (typeof hyva === 'undefined' || (!hyva.getBrowserStorage || !hyva.getCookie || !hyva.setCookie)) {
        console.warn("Hyvä helpers are not loaded yet. Make sure they are included before this script");
    }

    (function( hyva, undefined ) {
        let dispatchedMessages = false;

        hyva.initCartMessages = () => {
            try {
                <?php
                /**
                 * Wrap window.dispatchMessages() to avoid duplicate error messages.
                 * Duplicate messages are permitted to be displayed again after 10 seconds.
                 *
                 * Out of stock error messages are triggered when the cart page loads initially and
                 * are then triggered again when the GraphQL cart query is processed.
                 * This leads to duplicate error messages.
                 */
                ?>
                if (dispatchedMessages === false && window.dispatchMessages) {
                    const origDispatchMessages = window.dispatchMessages;
                    window.dispatchMessages = function(messages, hideAfter) {

                        const oldMessages = (dispatchedMessages || []).filter(message => message.ttl > Date.now());

                        const newMessages = messages.filter(newMessage => {
                            const duplicateMessages = oldMessages.filter(oldMessage => {
                                    return newMessage.type === oldMessage.type && newMessage.text === oldMessage.text
                                });
                            return duplicateMessages.length === 0;
                        });

                        origDispatchMessages(newMessages, hideAfter);

                        dispatchedMessages = oldMessages.concat(newMessages.map(message => {
                            return Object.assign(message, {ttl: Date.now() + 10000}) // expire after 10 seconds
                        }))
                    }
                }

                const messages = <?= /** @noEscape */ json_encode($messages) ?>;
                window.dispatchMessages && dispatchMessages(messages);
            } catch (error) {
                console.warn('Error parsing Cookie Messages:', error);
            }
        }

        window.addEventListener('load', function () {
            hyva.initCartMessages();
        })

    }( window.hyva = window.hyva || {} ));
</script>
